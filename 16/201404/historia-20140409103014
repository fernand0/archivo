Informática para los demás
<a href="https://www.flickr.com/photos/fernand0/5229616031/" title="Ficha perforada"><img src="https://farm6.staticflickr.com/5164/5229616031_bb8fbf9aa5_m.jpg" width="240"  alt="Ficha perforada" style="float:left; margin:5px"></a>
Hace algún tiempo en <a href="http://fernand0.blogalia.com/historias/73352">¿Educación en informática para todos?</a> hablábamos sobre la indudable importancia de la informática en el día a día y la duda sobre si introducir formación sobre estos temas en la escuela.  También en <a href="http://fernand0.blogalia.com/historias/72015"> Sobre la enseñanza de la informática para estudiantes en general</a>, <a href="http://fernand0.blogalia.com/historias/70863"> Los programas son el nuevo lenguaje de la ciencia</a>, <a href="http://fernand0.blogalia.com/historias/70766"> ¿Debemos enseñar a los niños a programar?</a>, <a href="http://fernand0.blogalia.com/historias/70533"> El valor de saber informática</a>. 

Que sepamos todos de informática o sólo algunos es algo que se puede seguir discutiendo, pero parece que está clara la necesidad de perfiles híbridos donde se sabe de algún tema en particular y además se tienen suficientes conocimientos informáticos para tratarlo desde este punto de vista. De eso hablan en <a href="http://www.cccblog.org/2014/02/17/computer-science-for-non-majors/">Computer Science for Non-Majors</a> donde se comenta sobre lo que debería saber de informática alguien que no sea especialista. O más bien, de los ingredientes adecuados para tener éxito y provocar atracción: programación, abstracción de procesos, aplicaciones concretas, herramientas para desarrollar cosas que realmente luego quieran utilizar y discutir las grandes ideas sobre eficiencia, intratabilidad o como funcionan las computadoras.

<blockquote>
What then should be taught in courses for non-majors?  I don't believe that there's one right answer, but I do believe that some of the ingredients are the following:

* Programming.  Building interesting computational artifacts is incredibly exciting and compelling and helps demystify the otherwise magical software that a college student uses everyday.

* Programming at a "high level of abstraction".  Specifically, using a language with low syntactic overhead and with built-in abstract data types in order to concentrate on building interesting computational tools.

* Demonstrating a breadth of applications.  Depending on the design of the course, this breadth might be a range of applications across many fields of studies, just in one domain (e.g., sciences, social sciences, arts), or a specific discipline (e.g., biology).

* Giving students the tools to write programs that they actually want to use.  Here are two simple litmus tests:  Will students spend at least as much time using their programs to explore something new as they did writing them (e.g., using a program to align biological sequence and make inferences from those alignments, building their own music recommender system, etc.)?  And, does the assigned work offer creative avenues for students to invent and implement their own ideas (e.g., in the form of innovative features above-and-beyond the minimum requirements)?  

* Discussing big ideas such as efficiency and intractability or how computers work.
</blockquote>

No estoy seguro de cuánto y a qué nivel de profundidad se podría llegar en todo ello, pero ya hay propuestos por ahí títulos que incluyen este tipod de ideas, como <a href="http://courses.cs.washington.edu/courses/cse140/">CSE140: Data Programming</a>, <a href="http://inst.eecs.berkeley.edu/~cs10/sp14/">CS10 : The Beauty and Joy of Computing UC Berkeley EECS</a>, o <a href="https://www.cs.hmc.edu/twiki/bin/view/CS5/WebHome">CS 5 Gold and Black</a>.

Llevo algún tiempo preguntándome si algo similar tendría futuro por aquí (sentido creo que sí) y si conseguiría llegar más allá de los 'sospechosos habituales' y convertirse en algo sostenible.

Por otra parte, nos podríamos salir del nivel universitario y pensar en la
sociedad en general: ¿Algo como <a href="http://zagales-hacklab.org/">Zagales Hacklab</a> para adultos?

<blockquote>
I believe that this is an ideal moment to develop new computing courses and curricula for non-majors.  This sounds crazy given that we're drowning in students and have little precious time to do much more than tread water.  Here's my case. 
</blockquote>

Los motivos están claro, cualquier persona con una buena educación debería tener una comprensión razonable de estos temas:

<blockquote>
Every well educated citizen should understand something about the computationally-pervasive world in which we live.  Second, computing skills are likely to be useful across virtually all disciplines including the arts, humanities, and social sciences.
</blockquote>

Y, merece la pena asignar recursos a estos temas, aunque nos cueste:

<blockquote>
It's hard to allocate resources to this endeavor, but it's an investment worth making, both for the well-being of society in general and to cultivate more computationally sophisticated future colleagues across all disciplines.
</blockquote>

<p class="tags">Etiquetas: <a href="http://delicious.com/fernand0/rei+informática" rel="tag">informática</a>, <a href="http://delicious.com/fernand0/rei+todos" rel="tag">todos</a>, <a href="http://delicious.com/fernand0/rei+estudiar" rel="tag">estudiar</a>, <a href="http://delicious.com/fernand0/rei+cursos" rel="tag">cursos</a>, <a href="http://delicious.com/fernand0/rei+formación" rel="tag">formación</a>, <a href="http://delicious.com/fernand0/rei+educación" rel="tag">educación</a>, <a href="http://delicious.com/fernand0/rei+tendencias" rel="tag">tendencias</a></p>
 Dónde:Reflexiones e Irreflexiones
 URL:http://fernand0//historias/74527
